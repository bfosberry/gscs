{"name":"GSCS","tagline":"Game Server Container Specification","body":"Running a game server inside a linux container is not an easy task. This specification is aimed at standardizing game server containers to both simplify the process of containerizing a game server, and also increase compatibility between different containers. \r\n\r\nVersion History | Updated At\r\n--------------- | ----------\r\nv0.1            | 3/16/15\r\n\r\n## Getting Started\r\nThis specification aims to be simple, and pluggable. A game server consists of a number of the components, the game server itself, a metadata file as part of the game server repository, a controller, a storage component, and watcher component. According to best practices, each component of a game server should be split into a different repository, with the primary game server residing within the main repo, although this is not enforced. Each component should be single purpose, with the main repo only serving the game server itself.\r\n\r\n## Metadata\r\nThe metadata documents how the game server is created, executed, configured, controlled and viewed. The file must adhere to a json schema, to make it easy to consume by both individual users an pluggable systems. For a more detailed overview of the metadata file, it's components, and how to create one, view the [metadata documentation](metadata)\r\n\r\n## Storage\r\nPrimarily containers are meant to be ephemeral, meaning you run them once, and delete them. In order to adhere to best practices, instead of having a container that is started, stopped, and restarted over a long period of time, the persisted components of the application are extracted to a data container. This is achieved through volume mounting, mapping a directory containing *ONLY* persisted data between the game server container and the data container. The data container must be started first, and then the game server started with the --volumes-from data-container type flag. As such both containers must specify the same data directory to be mapped. \r\n\r\nA data container should have the same base image as the game server itself, however should need no scripts, applications or configuration. It purely exists to be a lightweight volume provider.  \r\n\r\nHere is an example of a [simple data container](https://github.com/bfosberry/gamekick_storage)\r\n\r\n## Main Repo\r\nThe game server repository is the most complex component. This should be responsible for building the game server image through a Dockerfile, pulling down configuration, writing and configuration files, prepping directory structure and ownership, writing any startup scripts, and executing the game server itself. The execution should occur in the foreground and should block. This allows the orchestration platform to decide what action to take should the game server stop, as well as directly control the process and send signals to it. Most of the steps for creating the main game server repo involve implementing the metadata definition.\r\n\r\n### Dockerfile\r\nFind which linux distro is most supported or most efficient for your game server a stick with it. `ubuntu` is a safe bet since it is well supported.\r\n\r\n## Configuration\r\n## Controller\r\n## Watcher\r\n\r\n## Example repos\r\n\r\n* [Garry's Mod](https://github.com/bfosberry/gmod_server)","google":"UA-60792926-2","note":"Don't delete this file! It's used internally to help with page regeneration."}